// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aena.web;

import com.aena.domain.Reserva;
import com.aena.domain.Usuario;
import com.aena.domain.Vuelo;
import com.aena.web.ReservaController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ReservaController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ReservaController.create(@Valid Reserva reserva, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, reserva);
            return "reservas/create";
        }
        uiModel.asMap().clear();
        reserva.persist();
        return "redirect:/reservas/" + encodeUrlPathSegment(reserva.getIdReserva().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ReservaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Reserva());
        return "reservas/create";
    }
    
    @RequestMapping(value = "/{idReserva}", produces = "text/html")
    public String ReservaController.show(@PathVariable("idReserva") Integer idReserva, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("reserva", Reserva.findReserva(idReserva));
        uiModel.addAttribute("itemId", idReserva);
        return "reservas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ReservaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("reservas", Reserva.findReservaEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Reserva.countReservas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("reservas", Reserva.findAllReservas(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "reservas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ReservaController.update(@Valid Reserva reserva, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, reserva);
            return "reservas/update";
        }
        uiModel.asMap().clear();
        reserva.merge();
        return "redirect:/reservas/" + encodeUrlPathSegment(reserva.getIdReserva().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{idReserva}", params = "form", produces = "text/html")
    public String ReservaController.updateForm(@PathVariable("idReserva") Integer idReserva, Model uiModel) {
        populateEditForm(uiModel, Reserva.findReserva(idReserva));
        return "reservas/update";
    }
    
    @RequestMapping(value = "/{idReserva}", method = RequestMethod.DELETE, produces = "text/html")
    public String ReservaController.delete(@PathVariable("idReserva") Integer idReserva, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Reserva reserva = Reserva.findReserva(idReserva);
        reserva.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/reservas";
    }
    
    void ReservaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("reserva_diareserva_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("reserva_horareserva_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ReservaController.populateEditForm(Model uiModel, Reserva reserva) {
        uiModel.addAttribute("reserva", reserva);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("usuarios", Usuario.findAllUsuarios());
        uiModel.addAttribute("vueloes", Vuelo.findAllVueloes());
    }
    
    String ReservaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
